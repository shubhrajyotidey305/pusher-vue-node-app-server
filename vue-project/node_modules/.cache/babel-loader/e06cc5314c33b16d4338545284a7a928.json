{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { ref, onMounted } from 'vue';\nimport Pusher from 'pusher-js';\nexport default {\n  name: 'App',\n\n  setup() {\n    const username = ref('username');\n    const messages = ref([]);\n    const amount = ref('');\n    const date = ref('');\n    const authUrl = 'http://localhost:8000/pusher/user-auth';\n    onMounted(() => {\n      Pusher.logToConsole = true;\n      const pusher = new Pusher('503c295a8c71896beade', {\n        cluster: 'mt1',\n        // channelAuthorization: {\n        //   endpoint: authUrl,          \n        // },\n        // authEndpoint: authUrl,\n        authorizer: (socketId, callback) => {\n          fetch(authUrl, {\n            method: \"POST\",\n            headers: new Headers({\n              \"Content-Type\": \"application/json\"\n            }),\n            body: JSON.stringify({\n              socket_id: socketId,\n              channel_name: channel.name\n            })\n          }).then(res => {\n            if (!res.ok) {\n              throw new Error(`Received ${res.statusCode} from ${authUrl}`);\n            }\n\n            return res.json();\n          }).then(data => {\n            callback(null, data);\n          }).catch(err => {\n            callback(new Error(`Error calling auth endpoint: ${err}`), {\n              auth: \"\"\n            });\n          });\n        }\n      });\n      const channel = pusher.subscribe('private-my_channel');\n      channel.bind('my_event', data => {\n        messages.value.push(data);\n      });\n    });\n\n    const submit = async () => {\n      await fetch('http://localhost:8000/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: username.value,\n          amount: amount.value,\n          date: date.value\n        })\n      });\n      amount.value = '';\n      date.value = '';\n    };\n\n    return {\n      username,\n      amount,\n      date,\n      messages,\n      submit\n    };\n  }\n\n};","map":{"version":3,"mappings":";AAyBA,SAASA,GAAT,EAAcC,SAAd,QAA+B,KAA/B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,eAAe;EACbC,IAAI,EAAE,KADO;;EAEbC,KAAK,GAAG;IACN,MAAMC,QAAO,GAAIL,GAAG,CAAC,UAAD,CAApB;IACA,MAAMM,QAAO,GAAIN,GAAG,CAAC,EAAD,CAApB;IACA,MAAMO,MAAK,GAAIP,GAAG,CAAC,EAAD,CAAlB;IACA,MAAMQ,IAAG,GAAIR,GAAG,CAAC,EAAD,CAAhB;IACA,MAAMS,OAAM,GAAI,wCAAhB;IACAR,SAAS,CAAC,MAAM;MACdC,MAAM,CAACQ,YAAP,GAAsB,IAAtB;MACA,MAAMC,MAAK,GAAI,IAAIT,MAAJ,CAAW,sBAAX,EAAmC;QAChDU,OAAO,EAAE,KADuC;QAEhD;QACA;QACA;QACA;QACAC,UAAU,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;UAClCC,KAAK,CAACP,OAAD,EAAU;YACbQ,MAAM,EAAE,MADK;YAEbC,OAAO,EAAE,IAAIC,OAAJ,CAAY;cAAE,gBAAgB;YAAlB,CAAZ,CAFI;YAGbC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;cACnBC,SAAS,EAAET,QADQ;cAEnBU,YAAY,EAAEC,OAAO,CAACtB;YAFH,CAAf;UAHO,CAAV,CAAL,CAQGuB,IARH,CAQQC,GAAE,IAAK;YACX,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;cACX,MAAM,IAAIC,KAAJ,CAAW,YAAWF,GAAG,CAACG,UAAU,SAASrB,OAAQ,EAArD,CAAN;YACF;;YACA,OAAOkB,GAAG,CAACI,IAAJ,EAAP;UACD,CAbH,EAcGL,IAdH,CAcQM,IAAG,IAAK;YACZjB,QAAQ,CAAC,IAAD,EAAOiB,IAAP,CAAR;UACD,CAhBH,EAiBGC,KAjBH,CAiBSC,GAAE,IAAK;YACZnB,QAAQ,CAAC,IAAIc,KAAJ,CAAW,gCAA+BK,GAAI,EAA9C,CAAD,EAAmD;cACzDC,IAAI,EAAE;YADmD,CAAnD,CAAR;UAGD,CArBH;QAsBF;MA7BgD,CAAnC,CAAf;MA+BA,MAAMV,OAAM,GAAId,MAAM,CAACyB,SAAP,CAAiB,oBAAjB,CAAhB;MACAX,OAAO,CAACY,IAAR,CAAa,UAAb,EAAyBL,IAAG,IAAK;QAC/B1B,QAAQ,CAACgC,KAAT,CAAeC,IAAf,CAAoBP,IAApB;MACD,CAFD;IAGD,CArCQ,CAAT;;IAsCA,MAAMQ,MAAK,GAAI,YAAY;MACzB,MAAMxB,KAAK,CAAC,oCAAD,EAAuC;QAChDC,MAAM,EAAE,MADwC;QAEhDC,OAAO,EAAE;UAAE,gBAAgB;QAAlB,CAFuC;QAGhDE,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBjB,QAAQ,EAAEA,QAAQ,CAACiC,KADA;UAEnB/B,MAAM,EAAEA,MAAM,CAAC+B,KAFI;UAGnB9B,IAAI,EAAEA,IAAI,CAAC8B;QAHQ,CAAf;MAH0C,CAAvC,CAAX;MASA/B,MAAM,CAAC+B,KAAP,GAAe,EAAf;MACA9B,IAAI,CAAC8B,KAAL,GAAa,EAAb;IACF,CAZA;;IAaA,OAAO;MACLjC,QADK;MAELE,MAFK;MAGLC,IAHK;MAILF,QAJK;MAKLkC;IALK,CAAP;EAOF;;AAlEa,CAAf","names":["ref","onMounted","Pusher","name","setup","username","messages","amount","date","authUrl","logToConsole","pusher","cluster","authorizer","socketId","callback","fetch","method","headers","Headers","body","JSON","stringify","socket_id","channel_name","channel","then","res","ok","Error","statusCode","json","data","catch","err","auth","subscribe","bind","value","push","submit"],"sourceRoot":"","sources":["D:\\VS code Files\\real time vue pusher\\vue-project\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"d-flex flex-column align-items-stretch flex-shrink-0 bg-white\">\n      <div class=\"d-flex align-items-center flex-shrink-0 p-3 link-dark text-decoration-none border-bottom\">\n        <input class=\"fs-5 fw-semibold\" v-model=\"username\" />\n      </div>\n      <div class=\"list-group list-group-flush border-bottom scrollarea\">\n        <div class=\"list-group-item list-group-item-action py-3 lh-tight\" v-for=\"message in messages\" :key=\"message\">\n          <div class=\"d-flex w-100 align-items-center justify-content-between\">\n            <strong class=\"mb-1\">{{ message.username }}</strong>\n          </div>\n          <div class=\"col-10 mb-1 small\">{{ message.amount }}</div>\n          <div class=\"col-10 mb-1 small\">{{ message.date }}</div>\n        </div>\n\n      </div>\n    </div>\n    <form @submit.prevent=\"submit\">\n      <input class=\"form-control\" placeholder=\"Write a message\" v-model=\"amount\" />\n      <input class=\"form-control\" placeholder=\"Write a message\" v-model=\"date\" />\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport Pusher from 'pusher-js';\nexport default {\n  name: 'App',\n  setup() {\n    const username = ref('username');\n    const messages = ref([]);\n    const amount = ref('');\n    const date = ref('');\n    const authUrl = 'http://localhost:8000/pusher/user-auth'\n    onMounted(() => {\n      Pusher.logToConsole = true;\n      const pusher = new Pusher('503c295a8c71896beade', {\n        cluster: 'mt1',        \n        // channelAuthorization: {\n        //   endpoint: authUrl,          \n        // },\n        // authEndpoint: authUrl,\n        authorizer: (socketId, callback) => {\n          fetch(authUrl, {\n            method: \"POST\",\n            headers: new Headers({ \"Content-Type\": \"application/json\" }),\n            body: JSON.stringify({\n              socket_id: socketId,\n              channel_name: channel.name\n            })\n          })\n            .then(res => {\n              if (!res.ok) {\n                throw new Error(`Received ${res.statusCode} from ${authUrl}`);\n              }\n              return res.json();\n            })\n            .then(data => {\n              callback(null, data);\n            })\n            .catch(err => {\n              callback(new Error(`Error calling auth endpoint: ${err}`), {\n                auth: \"\"\n              });\n            });\n        }\n      });\n      const channel = pusher.subscribe('private-my_channel');\n      channel.bind('my_event', data => {\n        messages.value.push(data);\n      });\n    })\n    const submit = async () => {\n      await fetch('http://localhost:8000/api/messages', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          username: username.value,\n          amount: amount.value,\n          date: date.value,\n        })\n      })\n      amount.value = '';\n      date.value = '';\n    }\n    return {\n      username,\n      amount,\n      date,\n      messages,\n      submit\n    }\n  }\n}\n</script>\n\n<style>\n.scrollarea {\n  min-height: 500px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}